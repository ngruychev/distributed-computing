# https://kubernetes.io/docs/concepts/services-networking/ingress/
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: default
  annotations:
    appgw.ingress.kubernetes.io/use-private-ip: "false"
    kubernetes.io/ingress.class: azure/application-gateway

spec:
  rules:
    - host: distributed-computing.nickick.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backend-service
                port:
                  number: 3000
---

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: bitnami/valkey
          env:
            - name: VALKEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dc-secret
                  key: valkey-password
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: evgeni2003/group_backend:1.2
          command: ["npm", "run", "start-backend"]
          ports:
            - containerPort: 3000
          env:
            - name: REDIS_HOST
              value: redis-host
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dc-secret
                  key: valkey-password

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-host
spec:
  externalName: redis-service.default.svc.cluster.local
  selector:
    app: redis-host
  type: ExternalName

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - name: backend
      port: 3000
      targetPort: 3000

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
